1.	Implement different ways to create Objects in Javascript and explain their differences.

ANS:	JavaScript is designed on a simple object-based paradigm. An object is a collection of properties, and a property 
is an association between a name (or key) and a value. A property's value can be a function, in which case the property is 
known as a method. In addition to objects that are predefined in the browser, you can define your own objects.
	We can create objects in an object.Objects are mutable.They are addressed by reference, not by value.
	we can declare or create the objects in many ways they are discussed below.
		(a).  new Object () : Constuctor method. Creates an instance of Objects inheriting all its properties and methods.
		      Example : var myObj = new Object ()
				var myCar = new Object();					//creation of myCar object
				myCar.make = 'Ford';  	OR	myCar['make'] = 'Ford';		//mycar property
				myCar.model = 'Mustang';OR	myCar['model'] = 'Mustang';	//mycar property
				myCar.year = 1969;	OR	myCar['year'] = 1969;		//mycar property
		(b).  object initializers :
		      Example : var myCar = {make: 'Honda', model: 'verna', year: 2000 };
				console.log(myCar.make);	//gives output as 'Honda'
		(c).  constructor() functions :
		      Example :	function Car(make, model, year) {
  					this.make = make;
  					this.model = model;
  					this.year = year;
				}
				var myCar = new Car('Eagle', 'Talon TSi', 1993);
					//whenever a fumction is called with the 'new' it creates that function/class constructor as object.
				console.log(myCar.year);					//gives output as '1993'
					//using that constructor() we can create many number of 'Car' based objects.
				var kenscar = new Car('Nissan', '300ZX', 1992);
				console.log(kenscar.year);
		(d).  object.create() method : This creates prototype of an object.This method creates a new object extending 
the prototype object passed as a parameter.This is mainly used if you want to Inheritance custom object properties in your objects.
		      Example : const me = Object.create(person);
				const person = {
  
					isHuman: false,
  
					printIntroduction: function () {
    
						console.log(`My name is ${this.name}. Am I human? ${this.isHuman}`);
  
					}
				
};

		(e).  dynamic prototype : we can use default methods like 'prototype' ,'isprototypeof','hasownproperty'.

Note:
var a = Object.create(null); is not the same as var a = {};
var a = Object.create(null); sets the prototype of a as null where as
var a = {}; sets the prototype of a as the Object object



